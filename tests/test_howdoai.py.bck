import unittest
from unittest.mock import patch, MagicMock
from io import StringIO
import sys
import os

# Add the parent directory to sys.path to allow imports from the howdoai package
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import requests
from howdoai import main, main_cli, format_response, generate_follow_up_questions, AIResponse, AIRequestError
from howdoai.api_client import call_ai_api, AIResponse, AIRequestError

def integration_test(func):
    return unittest.skipIf(
        'SKIP_INTEGRATION_TESTS' in os.environ,
        'Skipping integration tests'
    )(func)

class TestHowDoAI(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None

    @patch('howdoai.api_client.call_ai_api')
    def test_response_with_code(self, mock_call_ai_api):
        mock_call_ai_api.return_value = AIResponse(
            content="To create a tar archive, use the following command:\n\n```\ntar -cvf archive.tar file1 file2 directory/\n```\n\nThis will create an archive named 'archive.tar' containing the specified files and directory."
        )

        result = main("how to create a tar archive")

        expected_output = {
            "answer": "<code>\ntar -cvf archive.tar file1 file2 directory/\n</code>",
            "follow_up_questions": result["follow_up_questions"]
        }
        self.assertEqual(result["answer"], expected_output["answer"])
        self.assertIsInstance(result["follow_up_questions"], list)
        self.assertGreaterEqual(len(result["follow_up_questions"]), 3)

    @patch('howdoai.api_client.call_ai_api')
    def test_response_without_code(self, mock_call_ai_api):
        mock_call_ai_api.return_value = AIResponse(
            content="The capital of France is Paris."
        )

        result = main("what is the capital of France")

        expected_output = {
            "answer": "<result>The capital of France is Paris.</result>",
            "follow_up_questions": result["follow_up_questions"]
        }
        self.assertEqual(result["answer"], expected_output["answer"])
        self.assertIsInstance(result["follow_up_questions"], list)
        self.assertGreaterEqual(len(result["follow_up_questions"]), 3)

    @patch('howdoai.api_client.call_ai_api')
    def test_error_response(self, mock_call_ai_api):
        mock_call_ai_api.side_effect = AIRequestError("API request failed: Internal Server Error")

        result = main("test query")

        expected_output = {"error": "Error: API request failed: Internal Server Error"}
        self.assertEqual(result, expected_output)

class TestHowDoAIMaxWords(unittest.TestCase):
    @patch('howdoai.api_client.call_ai_api')
    def test_max_words_limit(self, mock_call_ai_api):
        mock_call_ai_api.return_value = AIResponse(
            content="To create a tar archive, use the following command: tar -cvf archive.tar file1 file2 directory/. This will package the specified files and directories into a single archive file."
        )

        result = main("how to create a tar archive", max_words=10)

        word_count = len(result["answer"].split())
        self.assertLessEqual(word_count, 10, f"Output exceeded 10 words: {result['answer']}")
        self.assertIn("<result>", result["answer"])
        self.assertIn("</result>", result["answer"])

class TestHowDoAICLI(unittest.TestCase):
    @patch('sys.argv', ['howdoai', '--max-words', '10', 'how to create a tar archive'])
    @patch('sys.stdout', new_callable=StringIO)
    @patch('howdoai.api_client.call_ai_api')
    def test_cli_max_words(self, mock_call_ai_api, mock_stdout):
        mock_call_ai_api.return_value = AIResponse(
            content="To create a tar archive, use the following command: tar -cvf archive.tar file1 file2 directory/. This will package the specified files and directories into a single archive file."
        )

        main_cli()

        output = mock_stdout.getvalue().strip()
        answer_line = output.split('\n')[0]  # Get the first line, which should be the answer
        word_count = len(answer_line.split())
        
        self.assertLessEqual(word_count, 10, f"Output exceeded 10 words: {answer_line}")
        self.assertIn("<result>", answer_line)
        self.assertIn("</result>", answer_line)
        self.assertIn("Follow-up questions:", output)
        self.assertTrue(answer_line.startswith("<result>") or answer_line.startswith("<code>"))
        self.assertTrue(answer_line.endswith("</result>") or answer_line.endswith("</code>"))

    @patch('sys.argv', ['howdoai', 'how to create a tar archive'])
    @patch('sys.stdout', new_callable=StringIO)
    @patch('howdoai.api_client.call_ai_api')
    def test_cli_without_max_words(self, mock_call_ai_api, mock_stdout):
        mock_call_ai_api.return_value = AIResponse(
            content="To create a tar archive, use the command: tar -cvf archive.tar file1 file2 directory/"
        )

        main_cli()

        output = mock_stdout.getvalue().strip()
        self.assertIn("<result>", output)
        self.assertIn("tar -cvf archive.tar", output)
        self.assertIn("</result>", output)
        
    @patch('sys.argv', ['howdoai'])
    @patch('sys.stdout', new_callable=StringIO)
    @patch('sys.exit')
    def test_cli_no_query(self, mock_exit, mock_stdout):
        main_cli()

        output = mock_stdout.getvalue()
        self.assertIn("usage:", output)
        self.assertIn("howdoai", output)
        mock_exit.assert_called_once_with(1)

class TestHelperFunctions(unittest.TestCase):
    def test_format_response_with_code(self):
        input_text = "Here's a command:\n```\nls -la\n```\nThis lists files."
        expected_output = "<code>\nls -la\n</code>"
        self.assertEqual(format_response(input_text), expected_output)

    def test_format_response_without_code(self):
        input_text = "The capital of France is Paris."
        expected_output = "<result>The capital of France is Paris.</result>"
        self.assertEqual(format_response(input_text), expected_output)

    def test_format_response_with_max_words(self):
        input_text = "This is a long sentence that should be truncated."
        expected_output = "<result>This is a long sentence...</result>"
        self.assertEqual(format_response(input_text, max_words=5), expected_output)

    @patch('howdoai.api_client.requests.post')
    def test_call_ai_api_success(self, mock_post):
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"choices": [{"message": {"content": "Test response"}}]}
        mock_post.return_value = mock_response

        result = call_ai_api("Test query")
        self.assertEqual(result, AIResponse(content="Test response"))

    @patch('howdoai.api_client.requests.post')
    def test_call_ai_api_failure(self, mock_post):
        mock_post.side_effect = requests.exceptions.RequestException("API error")

        with self.assertRaises(AIRequestError):
            call_ai_api("Test query")

    @patch('howdoai.api_client.requests.post')
    def test_call_ai_api_empty_query(self, mock_post):
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"choices": [{"message": {"content": "Empty query response"}}]}
        mock_post.return_value = mock_response

        result = call_ai_api("")
        self.assertEqual(result, AIResponse(content="Empty query response"))

        # Check that the API was called with an empty string, not None
        called_data = mock_post.call_args[1]['json']
        self.assertEqual(called_data['messages'][1]['content'], "")

class TestHowDoAIIntegration(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None  # This will show the full diff for any failures

    @integration_test
    def test_integration_code_response(self):
        query = "how to create a tar archive"
        result = main(query)
        print(f"\nQuery: {query}")
        print(f"Result:\n{result}")
        self.assertIn("<code>", result["answer"])
        self.assertIn("tar", result["answer"])
        self.assertIn("</code>", result["answer"])

    @integration_test
    def test_integration_text_response(self):
        query = "what is the capital of France"
        result = main(query)
        print(f"\nQuery: {query}")
        print(f"Result:\n{result}")
        self.assertIn("<result>", result["answer"])
        self.assertIn("Paris", result["answer"])
        self.assertIn("</result>", result["answer"])

class TestHowDoAIFollowUpQuestions(unittest.TestCase):
    @patch('howdoai.api_client.call_ai_api')
    def test_generate_follow_up_questions(self, mock_call_ai_api):
        # Mock the initial response
        mock_call_ai_api.side_effect = [
            AIResponse(
                content="Quantum computing is a type of computation that harnesses the collective properties of quantum states, such as superposition, interference, and entanglement, to perform calculations."
            ),
            AIResponse(
                content="1. What are the practical applications of quantum computing?\n2. How does quantum computing differ from classical computing?\n3. What are the current challenges in quantum computing research?\n4. Can you explain the concept of quantum entanglement?\n5. How close are we to achieving practical quantum computers?"
            )
        ]

        # Call the main function with the initial query
        initial_query = "What is quantum computing?"
        result = main(initial_query)

        # Assert that we get a dictionary with 'answer' and 'follow_up_questions' keys
        self.assertIn('answer', result)
        self.assertIn('follow_up_questions', result)

        follow_up_questions = result['follow_up_questions']

        # Assert that we get a list of questions
        self.assertIsInstance(follow_up_questions, list)
        
        # Assert that we get at least 3 follow-up questions
        self.assertGreaterEqual(len(follow_up_questions), 3)

        # Assert that each question is a string and ends with a question mark
        for question in follow_up_questions:
            self.assertIsInstance(question, str)
            self.assertTrue(question.endswith('?'))

        # Assert that the follow-up questions are relevant to quantum computing
        relevant_keywords = ['quantum', 'computing', 'superposition', 'entanglement', 'qubit']
        self.assertTrue(any(any(keyword in question.lower() for keyword in relevant_keywords) for question in follow_up_questions))

    @patch('howdoai.api_client.call_ai_api')
    def test_generate_follow_up_questions_error(self, mock_call_ai_api):
        mock_call_ai_api.side_effect = AIRequestError("API Error")

        result = main("What is quantum computing?")

        self.assertIn('error', result)
        self.assertIn('API Error', result['error'])

if __name__ == '__main__':
    unittest.main(verbosity=2)